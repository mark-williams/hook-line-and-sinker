// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home snapshot renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <h1>
          React Hooks
        </h1>,
        <p>
          A little sandbox project to explore React Hooks patterns and (of course) testing.
        </p>,
        <ForwardRef>
          <ul>
            <li>
              <Link
                replace={false}
                to="/counter"
              >
                Counter
              </Link>
            </li>
            <li>
              <Link
                replace={false}
                to="/simple-form"
              >
                Simple Form
              </Link>
            </li>
          </ul>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "React Hooks",
        },
        "ref": null,
        "rendered": "React Hooks",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "A little sandbox project to explore React Hooks patterns and (of course) testing.",
        },
        "ref": null,
        "rendered": "A little sandbox project to explore React Hooks patterns and (of course) testing.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ul>
            <li>
              <Link
                replace={false}
                to="/counter"
              >
                Counter
              </Link>
            </li>
            <li>
              <Link
                replace={false}
                to="/simple-form"
              >
                Simple Form
              </Link>
            </li>
          </ul>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <li>
                <Link
                  replace={false}
                  to="/counter"
                >
                  Counter
                </Link>
              </li>,
              <li>
                <Link
                  replace={false}
                  to="/simple-form"
                >
                  Simple Form
                </Link>
              </li>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/counter"
                >
                  Counter
                </Link>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Counter",
                  "replace": false,
                  "to": "/counter",
                },
                "ref": null,
                "rendered": "Counter",
                "type": [Function],
              },
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/simple-form"
                >
                  Simple Form
                </Link>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Simple Form",
                  "replace": false,
                  "to": "/simple-form",
                },
                "ref": null,
                "rendered": "Simple Form",
                "type": [Function],
              },
              "type": "li",
            },
          ],
          "type": "ul",
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  ul {
    list-style-type: none;
    margin-block-start: 0;
    padding-inline-start: 0;
  }
  li {
    margin-bottom: 0.6em;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <h1>
            React Hooks
          </h1>,
          <p>
            A little sandbox project to explore React Hooks patterns and (of course) testing.
          </p>,
          <ForwardRef>
            <ul>
              <li>
                <Link
                  replace={false}
                  to="/counter"
                >
                  Counter
                </Link>
              </li>
              <li>
                <Link
                  replace={false}
                  to="/simple-form"
                >
                  Simple Form
                </Link>
              </li>
            </ul>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "React Hooks",
          },
          "ref": null,
          "rendered": "React Hooks",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "A little sandbox project to explore React Hooks patterns and (of course) testing.",
          },
          "ref": null,
          "rendered": "A little sandbox project to explore React Hooks patterns and (of course) testing.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ul>
              <li>
                <Link
                  replace={false}
                  to="/counter"
                >
                  Counter
                </Link>
              </li>
              <li>
                <Link
                  replace={false}
                  to="/simple-form"
                >
                  Simple Form
                </Link>
              </li>
            </ul>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <li>
                  <Link
                    replace={false}
                    to="/counter"
                  >
                    Counter
                  </Link>
                </li>,
                <li>
                  <Link
                    replace={false}
                    to="/simple-form"
                  >
                    Simple Form
                  </Link>
                </li>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    replace={false}
                    to="/counter"
                  >
                    Counter
                  </Link>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Counter",
                    "replace": false,
                    "to": "/counter",
                  },
                  "ref": null,
                  "rendered": "Counter",
                  "type": [Function],
                },
                "type": "li",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    replace={false}
                    to="/simple-form"
                  >
                    Simple Form
                  </Link>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Simple Form",
                    "replace": false,
                    "to": "/simple-form",
                  },
                  "ref": null,
                  "rendered": "Simple Form",
                  "type": [Function],
                },
                "type": "li",
              },
            ],
            "type": "ul",
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": true,
              "rules": Array [
                "
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  ul {
    list-style-type: none;
    margin-block-start: 0;
    padding-inline-start: 0;
  }
  li {
    margin-bottom: 0.6em;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
